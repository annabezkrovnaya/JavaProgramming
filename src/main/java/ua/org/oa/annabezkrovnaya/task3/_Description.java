package ua.org.oa.annabezkrovnaya.task3;

public @interface _Description {
    /*
    ﻿Создать Generic хранилище данных(GenericStorage).
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    В качестве хранилища использовать массив. Должно быть реализовано CRUD
    (create read update delete — «Создание чтение обновление удаление») операций.
    Детальное описание:
    1.	Создать конструктор без параметров. При вызове такого конструктора должен инициализироваться массив длиной 10.
    2.	Создать конструктор с параметром (int size). Size - размер массива.
    3.	Метод add(T obj), который добавит новый элемент в хранилище в конец
    4.	Метод T get(int index), который возвратит элемент по индексу в маcсиве.
    5.	Метод T[] getAll(), который вернет массив элементов. (Распечатать массив при помощи Arrays.toString(<-Ваш массив->))
    6.	Метод update(int index, T obj), который подменит объект по заданной позиции только, если на этой позиции уже есть элемент.
    7.	Meтод delete(int index), который удалит элемент по индексу и захлопнет пустую ячейку в массиве, если на этой позиции уже есть элемент.
    8.	Метод delete(T obj), который удалит заданный объект из массива
    9.	Метод который возвратит размер массива ЗАПОЛНЕНОГО
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Примечание:
    нужно всегда хранить индекс ячейки массива, который указывает на позицию следующую после последнего элемента.
    Изначально это 0 так как массив пуст, после добавления первого элемента индекс указывает на 1 и т.д.
    не забывайте что переменная index (get(int index), update(int index, T obj), delete(int index) )
    должна всегда попадать в рамки 0 - индекс последнего элемента.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
}
